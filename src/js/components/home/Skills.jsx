import React from 'react';
import {Accordion, Panel, Breadcrumb} from 'react-bootstrap';

export default class Skills extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <Breadcrumb>
        <Breadcrumb.Item href="/">Главная</Breadcrumb.Item>
        <Breadcrumb.Item active>Навыки</Breadcrumb.Item>
        </Breadcrumb>
        <h1>Навыки веб-разработки</h1>
        <p>Веб-разработка - интересная работа, которая приносит массу удовольствия и прибыли. Однако это также работа,
            которая требует многих навыков и большого опыта. Если вы решили стать веб-разработчиком, начните с основ:
            HTML, CSS, JavaScript. И не забывайте о разработке некоторых других навыков, таких как управление временем,
            чувство стиля, настойчивость в программировании и т. Д. Кроме того, если вы ищете профессиональных
            веб-разработчиков которые обладают всеми ранее упомянутыми навыками или у вас есть еще несколько вопросов,
            не стесняйтесь обращаться ко мне. Буду рад предоставить вам всю необходимую информацию и помощь.</p>
        <div className="row">
          <div className="col-md-6">
            <h2>Принцыпы SOLID</h2>
              <p>Принципы SOLID - это управление зависимостями для объектно-ориентированного программирования и
                  проектирования.</p>
            <Accordion>
              <Panel
                  eventKey="1"
                  header="Single Responsibility Principle (SRP)"
              >
                <p>Не должно быть больше одной причины для изменения класса</p>
                <p>Что является причиной изменения логики работы класса? Видимо, изменение отношений между классами,
                      введение новых требований или отмена старых. Вообще, вопрос о причине этих изменений лежит в
                      плоскости ответвенности, которую мы возложили на наш класс. Если у объекта много ответвенности,
                      то и меняться он будет очень часто. Таким образом, если класс имеет больше одной ответственности,
                      то это ведет к хрупкости дизайна и ошибкам в неожиданных местах при изменениях кода.</p>
              </Panel>
              <Panel
                  eventKey="2"
                  header="Open / Closed Principle (OCP)"
              >
                <p>Программные сущности (классы, модули, функции и т.д.) должны быть открыты для расширения, но
                      закрыты для изменения.</p>
                <p>Какую цель мы преследуем, когда применяем этот принцип? Как известно программные проекты в течение
                      свой жизни постоянно изменяются. Изменения могут возникнуть, например, из-за новых требований
                      заказчика или пересмотра старых. В конечном итоге потребуется изменить код в соответствии с
                      текущей ситуацией.</p>
                <p>С одной стороны внесение изменений требует времени программистов и тестировщиков, которое является
                      очень дорогим ресурсом в производстве ПО. С другой, бизнес должен достаточно быстро реагировать
                      на рыночные изменения и время здесь представляется очень важным конкурентным преимуществом.</p>
                <p>Отсюда можно сделать вывод, что нашей целью является разработка системы, которая будет достаточно
                      просто и безболезненно меняться. Другими словами, система должна быть гибкой. Например, внесение
                      изменений в библиотеку общую для 4х проектов не должно быть долгим («долгим» является разным
                      промежутком времени для конкретной ситуации) и уж точно не должно вести к изменениям в этих 4х
                      проектах.</p>
                <p>Принцип открытости/закрытость как раз и дает понимание того, как оставаться достаточно гибкими в
                      условиях постоянно меняющихся требований.</p>
              </Panel>
              <Panel
                  eventKey="3"
                  header="Liskov Substitution Principle (LSP)"
              >
                  <p>Eсли для каждого объекта o1 типа S существует объект o2 типа T, который для всех программ P
                      определен в терминах T, то поведение P не изменится, если o2 заменить на o1 при условии, что S
                      является подтипом T.</p>
                  <p>Функции, которые используют ссылки на базовые классы, должны иметь возможность
                      использовать объекты производных классов, не зная об этом.</p>
              </Panel>
              <Panel
                  eventKey="4"
                  header="Interface Segregation Principle (ISP)"
              >
                  <p>Формулировка: клиенты не должны зависеть от методов, которые они не используют</p>
                  <p>Как и при использовании других принципов проектирования классов мы пытаемся избавиться от ненужных
                      зависимостей в коде, сделать код легко читаемым и легко изменяемым.</p>
              </Panel>
              <Panel
                  eventKey="5"
                  header="Dependency Inversion Principle (DIP)"
              >
                  <p>Модули верхнего уровня не должны зависеть от модулей нижнего уровня.</p>
                  <p>Оба должны зависеть от абстракции.</p>
                  <p>Абстракции не должны зависеть от деталей. Детали должны зависеть от абстракций.</p>
              </Panel>
            </Accordion>
          </div>
            <div className="col-md-6">
                <h2>Принцыпы ООП</h2>
                <p>Концептуальная структура объектно-ориентированных систем основана на объектной модели.</p>
                <Accordion>
                    <Panel
                        eventKey="1"
                        header="Abstraction"
                    >
                        <p>Абстракция означает сосредоточиться на основных особенностях элемента или объекта в ООП,
                            игнорируя его посторонних или случайных свойств.</p>
                        <p>Существенные особенности относятся к контексту в который используется объектом.</p>
                    </Panel>
                    <Panel
                        eventKey="2"
                        header="Encapsulation"
                    >
                        <p>Инкапсуляция - это процесс связывания обоих атрибутов и методов вместе внутри класса.</p>
                        <p>Благодаря инкапсуляции внутренние детали класса могут быть скрыты извне.</p>
                        <p>Класс имеет методы, которые предоставляют пользовательские интерфейсы, посредством которых
                            могут использоваться сервисы, предоставляемые классом.</p>
                    </Panel>
                    <Panel
                        eventKey="3"
                        header="Modularity"
                    >
                        <p>Модульность - это процесс декомпозиции задачи (программы) на набор модулей, чтобы уменьшить
                            общую сложность проблемы.</p>
                        <p>Буч определил модульность следующим образом:</p>
                        <ul>
                            <li>«Модульность - это свойство системы, которая была разложена на набор связных и
                                cлабосвязанные модули".</li>
                            <li>Модульность тесно связана с инкапсуляцией.</li>
                            <li>Модульность может быть визуализирована как способ отображение инкапсулированных
                                абстракций в реальные физические модули, имеющие высокую сплоченность внутри модулей и
                                их межмодульное взаимодействие или связь низкое.</li>
                        </ul>
                    </Panel>
                    <Panel
                        eventKey="4"
                        header="Hierarchy"
                    >
                        <p>Посредством иерархии система может состоять из взаимосвязанных подсистем, которые могут иметь
                            свои собственные подсистем и т.д., пока не будут достигнуты компоненты наименьшего уровня.
                            Он использует принцип «Разделяй и властвуй». Иерархия позволяет повторно использовать код.
                        </p>

                        <p>В OOР существуют два типа иерархий:</p>
                        <ul>
                            <li>Иерархия «IS-A»: определяет иерархическую связь в наследовании, причем от
                                Super-class, может быть получено несколько подклассов, которые могут снова иметь
                                подклассы и так далее.
                                Если мы выведем класс Rose из класса Flower, мы можем сказать, что роза - это «цветок».
                            </li>

                            <li>Иерархия "PART-OF": определяет иерархическую взаимосвязь в агрегировании, посредством
                                которой класс может состоять из других классов. Например, цветок состоит из
                                чашелистиков, лепестков, тычинок и плодолистиков. Можно сказать, что лепесток - это
                                «часть» цветка.</li>
                        </ul>
                    </Panel>
                </Accordion>
            </div>
        </div>
          <div className="row">
              <div className="col-md-6">
                  <h2>Паттерны проектирования</h2>
                  <p>Я думаю, что проблема с шаблонами заключается в том, что люди их знают, но не знают, когда
                      применять какой.</p>
                  <Accordion>
                      <Panel
                          eventKey="1"
                          header="Generating design patterns"
                      >
                          <ul>
                              <li>Abstract Factory</li>
                              <li>Builder</li>
                              <li>Factory Method</li>
                              <li>Multiton</li>
                              <li>Pool</li>
                              <li>Prototype</li>
                              <li>Simple Factory</li>
                              <li>Singleton</li>
                              <li>Static Factory</li>
                          </ul>
                      </Panel>
                      <Panel
                          eventKey="2"
                          header="Structural structural patterns"
                      >
                          <ul>
                              <li>Adapter / Wrapper</li>
                              <li>Bridge</li>
                              <li>Composite</li>
                              <li>Data Mapper</li>
                              <li>Decorator</li>
                              <li>Dependency Injection</li>
                              <li>Facade</li>
                              <li>Fluent Interface</li>
                              <li>Flyweight</li>
                              <li>Proxy</li>
                              <li>Registry</li>
                          </ul>
                      </Panel>
                      <Panel
                          eventKey="3"
                          header="Behavioral design patterns"
                      >
                          <ul>
                              <li>Chain Of Responsibilities</li>
                              <li>Command</li>
                              <li>Iterator</li>
                              <li>Mediator</li>
                              <li>Memento</li>
                              <li>Null Object</li>
                              <li>Observer</li>
                              <li>Specification</li>
                              <li>State</li>
                              <li>Strategy</li>
                              <li>Template Method</li>
                              <li>Visitor</li>
                          </ul>
                      </Panel>
                      <Panel
                          eventKey="4"
                          header="Additionally"
                      >
                          <ul>
                              <li>Delegation</li>
                              <li>Service Locator</li>
                              <li>Repository</li>
                              <li>Entity-Artibut-Value</li>
                          </ul>
                      </Panel>
                  </Accordion>
              </div>
              <div className="col-md-6">
                <h2>Инструменты разработки</h2>
                <p>То что помагает в веб-разработке.</p>
                  <Accordion>
                      <Panel
                          eventKey="1"
                          header="Знание программ"
                      >
                          <ul>
                              <li><a href="https://www.jetbrains.com/webstorm/">WebStorm</a></li>
                              <li><a href="https://www.jetbrains.com/phpstorm/">PhpStorm</a></li>
                              <li><a href="https://www.sublimetext.com/3">Sublime Text 3</a></li>
                              <li><a href="https://atom.io/">Atom</a></li>
                          </ul>
                      </Panel>
                      <Panel
                          eventKey="2"
                          header="Система контроля версий"
                      >
                          <ul>
                              <li><a href="https://github.com/">Github</a></li>
                              <li><a href="https://bitbucket.org/">Bitbucket</a></li>
                          </ul>
                      </Panel>
                      <Panel
                          eventKey="3"
                          header="Тесты"
                      >
                          <ul>
                              <li><a href="http://unitjs.com/guide/mocha.html">Mocha</a></li>
                              <li><a href="http://chaijs.com/">Chai</a></li>
                              <li><a href="http://www.seleniumhq.org/">Selenium</a></li>
                          </ul>
                      </Panel>
                      <Panel
                          eventKey="4"
                          header="Чистота кода"
                      >
                          <p>Если вам когда-либо приходилось испытывать негативные последствия недостающей точки с
                              запятой или лишней запятой, или пробела, вы знаете, сколько времени можете потерять из-за
                              небольших ошибок в коде. Подключите такой инструмент, как
                              <a href="http://eslint.org/"> ESLint</a>?</p>
                      </Panel>
                      <Panel
                          eventKey="5"
                          header="Документация"
                      >
                          <p>К сожалению, руководство по разработке внешнего интерфейса не существует, но ресурс
                             <a href="https://developer.mozilla.org/ru/"> MDN</a> достаточно подходит для этой роли.</p>
                          <p>Хорошие front-end разработчики знают, что в каждом запросе поиска вам нужно добавить
                              префикс mdn. Или обратится за официальной документацией к тому ресурсу что Вам нужен.</p>
                      </Panel>
                  </Accordion>
              </div>
          </div>
      </div>
    );
  }
}
